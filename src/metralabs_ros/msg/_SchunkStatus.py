"""autogenerated by genmsg_py from SchunkStatus.msg. Do not edit."""
import roslib.message
import struct

import metralabs_ros.msg

class SchunkStatus(roslib.message.Message):
  _md5sum = "25e674653eb5fea7e752f17898cdeecd"
  _type = "metralabs_ros/SchunkStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """SchunkJointStatus[] joints

================================================================================
MSG: metralabs_ros/SchunkJointStatus
string  jointName
float32 current
uint8 errorCode
bool referenced
bool moving
bool progMode
bool warning
bool error 
bool brake
bool moveEnd
bool posReached

"""
  __slots__ = ['joints']
  _slot_types = ['metralabs_ros/SchunkJointStatus[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       joints
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SchunkStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joints is None:
        self.joints = []
    else:
      self.joints = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.joints:
        _x = val1.jointName
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_f9B.pack(_x.current, _x.errorCode, _x.referenced, _x.moving, _x.progMode, _x.warning, _x.error, _x.brake, _x.moveEnd, _x.posReached))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joints = []
      for i in xrange(0, length):
        val1 = metralabs_ros.msg.SchunkJointStatus()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.jointName = str[start:end]
        _x = val1
        start = end
        end += 13
        (_x.current, _x.errorCode, _x.referenced, _x.moving, _x.progMode, _x.warning, _x.error, _x.brake, _x.moveEnd, _x.posReached,) = _struct_f9B.unpack(str[start:end])
        val1.referenced = bool(val1.referenced)
        val1.moving = bool(val1.moving)
        val1.progMode = bool(val1.progMode)
        val1.warning = bool(val1.warning)
        val1.error = bool(val1.error)
        val1.brake = bool(val1.brake)
        val1.moveEnd = bool(val1.moveEnd)
        val1.posReached = bool(val1.posReached)
        self.joints.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.joints:
        _x = val1.jointName
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_f9B.pack(_x.current, _x.errorCode, _x.referenced, _x.moving, _x.progMode, _x.warning, _x.error, _x.brake, _x.moveEnd, _x.posReached))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joints = []
      for i in xrange(0, length):
        val1 = metralabs_ros.msg.SchunkJointStatus()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.jointName = str[start:end]
        _x = val1
        start = end
        end += 13
        (_x.current, _x.errorCode, _x.referenced, _x.moving, _x.progMode, _x.warning, _x.error, _x.brake, _x.moveEnd, _x.posReached,) = _struct_f9B.unpack(str[start:end])
        val1.referenced = bool(val1.referenced)
        val1.moving = bool(val1.moving)
        val1.progMode = bool(val1.progMode)
        val1.warning = bool(val1.warning)
        val1.error = bool(val1.error)
        val1.brake = bool(val1.brake)
        val1.moveEnd = bool(val1.moveEnd)
        val1.posReached = bool(val1.posReached)
        self.joints.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_f9B = struct.Struct("<f9B")
